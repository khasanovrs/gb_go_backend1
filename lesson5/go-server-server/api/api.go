// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all pets
	// (GET /pets)
	ListPets(w http.ResponseWriter, r *http.Request, params ListPetsParams)
	// Create a pet
	// (POST /pets)
	CreatePets(w http.ResponseWriter, r *http.Request)
	// Info for a specific pet
	// (GET /pets/{petId})
	ShowPetById(w http.ResponseWriter, r *http.Request, petId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListPets operation middleware
func (siw *ServerInterfaceWrapper) ListPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPetsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePets operation middleware
func (siw *ServerInterfaceWrapper) CreatePets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePets(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ShowPetById operation middleware
func (siw *ServerInterfaceWrapper) ShowPetById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "petId" -------------
	var petId string

	err = runtime.BindStyledParameter("simple", false, "petId", chi.URLParam(r, "petId"), &petId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter petId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowPetById(w, r, petId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets", wrapper.ListPets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.CreatePets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets/{petId}", wrapper.ShowPetById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUTW/bOBD9K8TsHnYB1bKTogfd2iJADbRFgOQW+MBKI4mpRDLDkWPD0H8vhpTj1HGa",
	"HlogJ4v0fLz35g13ULreO4uWAxQ7CGWLvY6fF0SO5MOT80hsMF6XrkL5rR31mqEAY/n8DDLgrcd0xAYJ",
	"xgx6DEE3MXr6MzAZ28A4ZkB4NxjCCoqbVPMQv3oo5r7dYslS6xL5KRZTHSN59/YkEqv7UzAyYN28DM9U",
	"MJV4BlkCw9jHj38Jayjgn/wgbT7pmguN8aGIJtJbGKWfsbWT5M6UaEMEm0DDl+V1TDHcyfHqXjcNkpK2",
	"7Eh0WyMF4ywUsJjNZ3OJdh6t9gYKOI9XGXjNbYSX+wlwkyQVQTUbZ5cVFPDZBI6MJIN0j4wUoLjZQYWh",
	"JOM5dfrk7lWv7VZF2oqdIuSBrNKsnEXFpkf1X683ajGf/w9CEAq4G5C2ezEL6ExvGLLJdb/lqnElswne",
	"2ZA8cDafJ1taRhsJae87U0ZK+W0QtLtHHV6YTkjj+Jnse+V1g5WK81KuVj4p1KKuojw72LyxuIntj1M7",
	"Y7+LPtyikphYS4ocaDxW4NiKCU2th47/GM+02ieIDhY3HkvGSuEUk0EY+l7TdjKH0l2358+6EW9APK7G",
	"DLwLJzz1kVAzTq46Gt7iqWRfh657EAdeEf3EQ2mh/5T9mKXVynceeVmNz67YVevuL5E/bJfVS1t23aIy",
	"lZhF3OORp0Ujg2vcL5Vs9mGnYnN4/IAxDfgrh/3ljTol9MVe5n1j4aXVWndG7u4GDPyaJr+0tVO1I6VV",
	"8Fia2pTPmEDSkNb7cQ7UQQEtsy/y6A55smchveEz4/L1AsbV+CMAAP//7SXEAocHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
