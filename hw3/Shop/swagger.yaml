openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
servers:
  - url: /
tags:
  - name: auth
    description: Authentication
  - name: item
    description: Items
  - name: order
    description: Orders
paths:
  /user/login:
    post:
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The user name for login
                password:
                  type: string
                  description: The password for login in clear text
        required: true
      tags:
        - auth
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: { }
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      tags:
        - auth
      responses:
        200:
          description: successful logout
          content: { }
  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      tags:
        - item
      parameters:
        - in: query
          name: price_min
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: price_max
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content: { }
        400:
          description: Invalid price range
          content: { }
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      tags:
        - item
      requestBody:
        description: Item object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - api_key: [ ]
  /items/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      tags:
        - item
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - additionalMetadata
                - file
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
        required: true
      responses:
        200:
          description: successful operation
          content: { }
        500:
          description: Invalid operation
          content: { }
      security:
        - api_key: [ ]
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - api_key: [ ]
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Item not found
          content: { }
      security:
        - api_key: [ ]
  /order:
    get:
      summary: Lists Orders with filters
      operationId: ListOrders
      tags:
        - order
      parameters:
        - in: query
          name: order_date_from
          description: Start order date
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: order_date_to
          description: End order date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: successful operation
          content: { }
        400:
          description: Invalid date range
          content: { }
    post:
      summary: Add a new order to the store
      operationId: CreateOrder
      tags:
        - order
      requestBody:
        description: Order object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItems'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
  /order/{id}:
    get:
      summary: Find order by ID
      operationId: GetOrder
      tags:
        - order
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates an order in the store with form data
      operationId: UpdateOrder
      tags:
        - order
      parameters:
        - name: id
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItems'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - api_key: [ ]
    delete:
      summary: Deletes an order
      operationId: DeleteOrder
      tags:
        - order
      parameters:
        - name: id
          in: path
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Order not found
          content: { }
      security:
        - api_key: [ ]
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    OrderItems:
      type: array
      items:
        type: object
        properties:
          item_id:
            $ref: '#/components/schemas/Item'
          count:
            type: integer
            format: int64
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItems'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header